[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[project]
name = "ronschaeffer-ics-calendar-utils"
version = "0.1.2"
description = "Python utility library for generating and manipulating ICS calendar files"
authors = [
    {name = "ronschaeffer", email = "ron@ronschaeffer.com"}
]
readme = "README.md"
license = {text = "MIT"}
keywords = ["python", "ics", "calendar", "events"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]
requires-python = ">=3.11"
dependencies = [
    "pyyaml>=6.0",
    "python-dotenv>=1.0",
]

[project.optional-dependencies]
dev = [
    "ruff>=0.12",
    "pytest>=8.0",
    "pytest-cov>=6.2",
    "pre-commit>=4.2.0",
]

[project.urls]
Homepage = "https://github.com/ronschaeffer/ics_calendar_utils"
Repository = "https://github.com/ronschaeffer/ics_calendar_utils.git"
Issues = "https://github.com/ronschaeffer/ics_calendar_utils/issues"

[tool.poetry]
packages = [{include = "ics_calendar_utils", from = "src"}]

[tool.ruff]
line-length = 88
target-version = "py311"
src = ["src", "tests"]

[tool.ruff.lint]
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # pyflakes
    "I",    # isort
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "UP",   # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by formatter
]

[tool.ruff.lint.per-file-ignores]
"tests/**/*" = ["S101"]  # allow assert in tests

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=ics_calendar_utils",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
markers = [
    "slow: marks tests as slow (deselect with -m \"not slow\")",
    "integration: marks tests as integration tests",
]

[tool.coverage.run]
source = ["src"]
branch = true

[tool.coverage.report]
show_missing = true
skip_covered = false
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
]
